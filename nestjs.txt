nestjs: a framework butlt on top of express with cool feature like:
1-Embraces TypeScript 2-Dependency Injection 3-Modularity (Angular for back-end)

pipes: validate data contained in the request
Guard: make sure th user is authenticated
Modules: groups together codes
Filters: handles errors that occur during request handling
Interceptors: adds extra logic to incoming request or outgoing responses


# Conventions
- One class per file (some exceptions)
- Class names should include the kind of the things we are creating
- Name of class and name of file should always match up
- Filename template: name.type_of_thing.ts

- npm i -g @nestjs/cli

# nest commandOrAlias requiredArg [optionalArg] [options]
- nest new --dry-run <project-name>
    By Alias
- nest n <project-name> -d 

# what comes from nestjs is important to put '@' before it as a decorator :
decorators can be attached to classes, methods of classes, properties, arguments
@Module is a decorator that should be attached to a class
import {Module} from '@nestjs/common'

@Module({
    imports: [],
    controllers: [AppController],
    providers: [AppService]
})

export class AppModule {}


#================= @Controller decorator 
# turns a class (attaches to a class) into a controller, we also

import {Controller} from '@nestjs/common'

@Controller('products')
export class ProductsController {

    @Post()
    addProduct(): any {
        return {

        }
    }
}

#================== @Injectable() decorator
# makes our service class injectable

import {Injectable} from '@nestjs/common'
import {Product} from './product.model'

@Injectable()
export class ProductService {
    products: Product[] = []
}


#=================== simple model class in TypeScript

export class Product {

# by defining accessors for constructor args typescript auto generates properties for us
# otherwise we have to define them ourselves in case of not defining modifiers

    constructor(
        public id: String,
        public title: String,
        public description: String,
        public price: Number
    ){}

    VS
    
    id: String
    title: String
    description: String
    price: Number

    constructor(id: String,title: String,description: String,price: Number){
        this.id = id
        this.title = title
        this.description = description
        this.price = price
    }
}

#=================== Nestjs cli
generate (g): and/or modifies files based on a schematic.
add: Imports a library that has been packaged as a nest library, running its install schematic.
update (u): @nestjs dependencies in the package.json"dependencies" list to their @latest version.
info (i): information about installed nest packages and other helpful system info.

Generate Schematics: 

      |  name         │ alias       │ description                                  │
      │ application   │ application │ Generate a new application workspace         │
      │ class         │ cl          │ Generate a new class                         │
      │ configuration │ config      │ Generate a CLI configuration file            │
      │ controller    │ co          │ Generate a controller declaration            │
      │ decorator     │ d           │ Generate a custom decorator                  │
      │ filter        │ f           │ Generate a filter declaration                │
      │ gateway       │ ga          │ Generate a gateway declaration               │
      │ guard         │ gu          │ Generate a guard declaration                 │
      │ interceptor   │ in          │ Generate an interceptor declaration          │
      │ interface     │ interface   │ Generate an interface                        │
      │ middleware    │ mi          │ Generate a middleware declaration            │
      │ module        │ mo          │ Generate a module declaration                │
      │ pipe          │ pi          │ Generate a pipe declaration                  │
      │ provider      │ pr          │ Generate a provider declaration              │
      │ resolver      │ r           │ Generate a GraphQL resolver declaration      │
      │ service       │ s           │ Generate a service declaration               │
      │ library       │ lib         │ Generate a new library within a monorepo     │
      │ sub-app       │ app         │ Generate a new application within a monorepo │
      │ resource      │ res         │ Generate a new CRUD resource                 │
      │ pipe          │ pi          │ Generate a pipe declaration                  │
      │ provider      │ pr          │ Generate a provider declaration              │
      │ resolver      │ r           │ Generate a GraphQL resolver declaration      │
      │ service       │ s           │ Generate a service declaration               │
      │ library       │ lib         │ Generate a new library within a monorepo     │
      │ sub-app       │ app         │ Generate a new application within a monorepo │
      │ resource      │ res         │ Generate a new CRUD resource                 │


# adding view engine
import {NestFactory} from '@nestjs/core'
import {NestExpressApplication} from '@nestjs/platfor-express'
import {join} from 'path'

const app = await NestFactory<NestExpressApplication>()
app.useStaticAssets(join(__dirname, '..', 'public'))
app.setViewsDir(join(__dirname, '..', 'views'))
app.setViewEngine('ejs')

# Database 
#using typeorm
- npm install --save @nestjs/typeorm typeorm

import {Module} from '@nestjs/common'
import {TypeOrmModule} from '@nestjs/typeorm
@Module({
    imports: [
        TypeOrmMdule.forRoot({
            type: 'mongodb',
            host: 'http://localhost:27017/'
            username: 'admin',
            password: 'admin',
            database: 'test',
            entities: [],
            synchronize: true //for production must be off to prevent data loss
        })
    ],
})
export class AppModule {1}

# we can make a file named ormconfig.json and call forRoot() without passing anything

## Pipes
A pipe is a class annotated with the @Injectable() decorator, which implements the PipeTransform interface.
usage: 
- transformation: transform input data to the desired form (e.g., from string to integer)
- validation: evaluate input data and if valid, simply pass it through unchanged; otherwise, throw an exception when the data is incorrect

### Built-in pipes

Nest comes with nine pipes available out-of-the-box:

    ValidationPipe
    ParseIntPipe
    ParseFloatPipe
    ParseBoolPipe
    ParseArrayPipe
    ParseUUIDPipe
    ParseEnumPipe
    DefaultValuePipe
    ParseFilePipe

They're exported from the @nestjs/common package.

usage: 
```

@Get(':id')
async findOne(@Param('id', ParseIntPipe) id: number) {
  return this.catsService.findOne(id);
}
```
> If you want to customize it : ```

@Get(':id')
async findOne(
  @Param('id', new ParseIntPipe({ errorHttpStatusCode: HttpStatus.NOT_ACCEPTABLE }))
  id: number,
) {
  return this.catsService.findOne(id);
}
```
> pipes also work on @Query() parameters.

### Custom pipes

