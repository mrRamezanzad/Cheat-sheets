email: mtamadon1997@gmail.com
telegram: mtamadon
- docker run -it --rm [php, node, ubuntu] sh 
#it => makes interactive & --rm => removes interactive part after exiting

- docker run -it --rm node:alpine sh
- docker run -it --rm node:12 sh
# ':' => by using ':' we choose an specefic tag of versioning

- docker ps -a
- docker start 23442342fsf234 #starts from existing docker

- docker commit 23442342fsf234  mynodeapp:1
#Commiting makes a backup (image) from current state
- docker image ls #listing all the images of docker

#============automizing the process in Dockerfile=============
- From node:alpine
- Workdir /app
- Copy package.json . 
- Run npm i
- Copy index.js . 
- CMD ["node", "index.js"]

# Copy <file-in-our-local-system> <location-in-docker-container-to-copy-into>
- Run npm i expose 8080 #defines the port to run 
# Run is commands that is used during making image

- CMD...
# CMD are the commands that used after installing the server

- docker build . -t nodeapp:1 [it's a tag] -d [run in background]

- docker run sdafasdfasfr74f
- docker stop 4234hh3423h1jk [container-id]

- from dockerhub.ir/node:12

====================== load balancing==============
haproxy
nginx
docker-swarm

=========================nodes[servers] 
1-master #always 51% of masters should be up (at least 3 masters)
#msters manages the work of workers(slave)
2-worker #applications are ran on these servers

===================== Docker Compose =====================
#docker-compose.yaml
- docker-compose up
- docker-compose down

-docker logs fsadfsaf [container-id]

#========================making application stateless

1-minio
2-s3 (by amazon)[it's called object storage]



https://raft.github.io/

etcd # for very critical data's we use etcd



=========================== docker swarm
- docker swarm init
- docker node #for managing nodes of swarm
- docker node ls
- docker swarm join-token 
- docker swarm join --token <token-code>

#services in swarm & docker-compose are our applications that are on multiple containers

#dockker service just runs from master node
- docker service create  -p 8080:80 --name myserver nginx
- docker service ls
- docker service rm <service-name>
- docker service ps myserver [name-of-service]
- docker service scale myserver=6 [number-of-swarms-that-we-want]
- docker service create --name apache -p 8080:80 httpd:2.4.41-alpine
- docker swarm init --force-new-cluster --advertise-addr 192.168.0.26
- docker swarm leave #quits the node out of swarm
- docker node demote node3 [node-name]
- docker node update node1 --availability [can run new services on it] 
- docker node update node2 --label-add disk=ssd
- docker node update node3 --label-add disk=hdd
- docker node inspect #gives very detailed informations of node

- docker stack deploy 



========================================== pm2
- pm2 start index.js #not a good option for big load projects a better way is running by docker 
- pm2 monit
- pm2 --watch [works like nodemon]
nvm --remote-ls

- yum install httpd
- httpd [for checking application performance in ab command]
- ab -n 10000 [number of requests] -c [number of sametime requests] 10 127.0.0.1:3000

yum install bind-utils
#gives ip address of servers
dig A mtamadon.ir
dig A google.com

#must set mx and optional spf but make emails spam
mx #getting email
spf #sending email and who can send email

=========================================== Redis
# ioRedis is a nodejs library to work with redis 
# default port is 6379
# sql based (key value structure)
# because this db is in-memory type so it's very fast
# supports lists, sorted set, hash map (dictionary or js object) data types
- docker run -p 6379:6379 redis
- docker ps
- docker exec -it a7 sh
- redis
- set name ali
- get name 
- set cnt 0
- INCR cnt #increments the variable
- INCRBY cnt 10 #add 10 to the variable 
- DECR cnt #decrements the variable
- HSET user name ali
- HSET user mobile 098922345577
- HGET user name
- 