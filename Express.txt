========================== Mongoose
{useCreateIndex: true, useNewUrlParser: true, useUnifiedTopology} # handles deprication errors
{type: mongoose.Schema.Types.ObjectId
required: true,
minLength: 3,
maxlength: 6,
trim,
default: Date.now
}

================== bcrypt
bcrypt.hash(<passwor-text>, <number-of-salt-rounds>, (err, hash) => {
	#saving the hashed password processes
	next()
}

=================== cookie
document.cookie
require('cookie-parser')

app.use(cookieParser())
res.cookie("name", "ramin")
res.cookie({name: "ramin"})
console.log(req.cookies)
res.clearCookie("name")

=========================== session
require('express-session')
app.use(session({
	key: 'user_sid',
	secret: 'mysercretKey',
	resave: false, 
# resave even if session did not change (bad for two requests with change and no change conflicting)
	saveUninitialized: false,
# saves session by default(true) useful when we have to ask permission
	cookie: {
	    expires: 600000
	}
   })
)

req.session.user = user
console.log(req.session)

======================= user authentication steps
1- setup
2- define user model and mongoose connection
3- add register page (route, view)
4- add register route (bcrypt)
5- add login page (route, view)
6- add login route (render dashboard)
7- add express session (install, require, middleware)
8- add req.session.user in login route
9- use req.sesssion.user
10- sesssionChecker for logedIn users
11- loginChecker for logoute users


============================ Multer
cont avatarStorage = multer.diskStorage({
	destination: function (req, file, cb) {
		let a = path.join(__dirname, '../public/images')
		cb(null, path.join(__dirname, '../public/images'))
	},
	filename: function (req, file, cb) {
		let a = `${req.session.user.username}-${Date.now()}-${file.originalname}`
		cb(null, `${req.session.user.username}-${Date.now()}-${file.originalname}`)
	}
})

path.extname(file.originalname) # trick to get the extension of file 

uploadAvatar = multer({
	storage: avatarStorage, 
	fileFilter: function (req, file, cb) {
		# checking by regular expression
		if (file.mimetype === 'img/png' ||file.mimetype === 'img/jpg' ||file.mimeType === 'img/jpeg') {
			cb(new Error('invalid type!'))
		} else {
			cb(null, true)
		}
})		

# using upload functionality in router
router.post('/avatar', (req, res) => {
	const upload = generealTools.uploadAvatar.single('avatar')
	upload(req, res, function(err) {
		if (err instanceof multer.MulterError) {res.status(404).send('Server Error!')}
		else if (err) {res.status(406).send(err.message)}
		else {res.json(true)}
	})
})

